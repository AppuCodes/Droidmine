package net.droidmine;

import java.io.File;
import java.net.Proxy;
import java.time.Duration;
import java.util.function.Consumer;
import java.util.function.Function;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.mojang.authlib.properties.PropertyMap;
import com.mojang.authlib.properties.PropertyMap.Serializer;

import net.droidmine.pathfinder.PathWalker;
import net.minecraft.client.ClientEngine;
import net.minecraft.client.entity.EntityPlayerSP;
import net.minecraft.client.gui.GuiMainMenu;
import net.minecraft.client.main.GameConfiguration;
import net.minecraft.client.multiplayer.*;
import net.minecraft.client.network.NetHandlerPlayClient;
import net.minecraft.client.options.GameOptions;
import net.minecraft.entity.Entity;
import net.minecraft.network.Packet;
import net.minecraft.util.MovingObjectPosition;

public class MineBot
{
    public static volatile int instances = 0;
    private final ClientEngine engine;
    private boolean window = false;
    private String serverHost;
    public Session session;
    
    public MineBot(String serverHost, Session session, boolean... window)
    {
        this.serverHost = serverHost;
        this.session = session;
        this.window = window.length != 0 && window[0];
        engine = new ClientEngine(getConfig(), !this.window);
        instances++;
    }
    
    public void run()
    {
        engine.run();
    }
    
    public void quit()
    {
        disconnectFromServer();
        engine.exitGame = true;
    }
    
    public void changeServers(String serverHost)
    {
        disconnectFromServer();
        engine.displayGuiScreen(new GuiConnecting(new GuiMainMenu(), engine, new ServerData(serverHost, serverHost, false)));
    }
    
    public void disconnectFromServer()
    {
        engine.disconnect = true;
    }
    
    /** sleeps the current thread */
    public void sleep(Duration duration)
    {
        try { Thread.sleep(duration.toMillis()); } catch (InterruptedException e) {}
    }
    
    public void sleep(long duration)
    {
        try { Thread.sleep(duration); } catch (InterruptedException e) {}
    }
    
    public PathWalker pathFinder()
    {
        if (engine.pathWalker == null)
            engine.pathWalker = new PathWalker(engine);

        return engine.pathWalker;
    }
    
    private GameConfiguration getConfig()
    {
        Gson gson = new GsonBuilder().registerTypeAdapter(PropertyMap.class, new Serializer()).create();
        PropertyMap map = gson.fromJson("{}", PropertyMap.class);
        
        File root = new File("data"),
             packsDir = new File(root, "resourcepacks/");
        
        return new GameConfiguration(new GameConfiguration.UserInformation(session, map, map, Proxy.NO_PROXY), new GameConfiguration.DisplayInformation(1280, 720, false, false), new GameConfiguration.FolderInformation(root, packsDir, root, "1.8"), new GameConfiguration.GameInformation(false, "1.8.9"), new GameConfiguration.ServerInformation(serverHost, 25565));
    }
    
    public void onLoop(Runnable gameLoop)
    {
        engine.gameLoop = gameLoop;
    }
    
    public void onChatReceive(Consumer<String> chatEvent)
    {
        engine.chatEvent = chatEvent;
    }
    
    public void onTick(Runnable tickEvent)
    {
        engine.tickEvent = tickEvent;
    }
    
    public void onPacketSend(Function<Packet, Packet> packetSendEvent)
    {
        engine.packetSendEvent = packetSendEvent;
    }
    
    public void onPacketReceive(Function<Packet, Packet> packetReceiveEvent)
    {
        engine.packetReceiveEvent = packetReceiveEvent;
    }
    
    public void onJoin(Runnable joinEvent)
    {
        engine.joinEvent = joinEvent;
    }
    
    public WorldClient world()
    {
        return engine.world;
    }
    
    public EntityPlayerSP player()
    {
        return engine.player;
    }
    
    public GameOptions options()
    {
        return engine.options;
    }
    
    public Logger logger(String name)
    {
        return LogManager.getLogger(name);
    }
    
    public NetHandlerPlayClient network()
    {
        return engine.player.sendQueue;
    }
    
    /** Finds an entity from the world, based on its name. */
    public Entity findEntity(String name)
    {
        for (Entity entity : world().loadedEntityList)
        {
            System.out.println(entity.getDisplayName().getUnformattedText());
            if (entity.getDisplayName().getUnformattedText().equals(name))
            {
                return entity;
            }
        }
        
        return null;
    }
    
    public MovingObjectPosition hitResult() { return engine.hitResult; }
}
