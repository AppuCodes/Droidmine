package net.droidmine.utils;

import java.util.*;

import net.minecraft.block.state.IBlockState;
import net.minecraft.util.BlockPos;
import net.minecraft.util.EnumFacing;
import net.minecraft.world.World;

public class PathFinder
{
    private World world;
    private BlockPos start, goal;
    private PriorityQueue<Node> openSet;
    private Set<BlockPos> closedSet;
    private Map<BlockPos, Node> allNodes;
    
    public PathFinder(World world, BlockPos start, BlockPos goal)
    {
        this.world = world;
        this.start = start;
        this.goal = goal;
        this.openSet = new PriorityQueue<>(Comparator.comparingDouble(n -> n.fCost));
        this.closedSet = new HashSet<>();
        this.allNodes = new HashMap<>();
    }
    
    public List<BlockPos> findPath()
    {
        Node startNode = new Node(start, null, 0, heuristic(start, goal));
        openSet.add(startNode);
        allNodes.put(start, startNode);
        
        while (!openSet.isEmpty())
        {
            Node current = openSet.poll();
            
            if (current.pos.equals(goal))
                return reconstructPath(current);
            
            closedSet.add(current.pos);
            
            for (BlockPos neighbor : getNeighbors(current.pos))
            {
                if (closedSet.contains(neighbor)) continue;
                double tentativeG = current.gCost + 1;
                Node neighborNode = allNodes.getOrDefault(neighbor, new Node(neighbor, null, Double.MAX_VALUE, heuristic(neighbor, goal)));
                
                if (tentativeG < neighborNode.gCost)
                {
                    neighborNode.parent = current;
                    neighborNode.gCost = tentativeG;
                    neighborNode.fCost = neighborNode.gCost + neighborNode.hCost;
                    
                    if (!openSet.contains(neighborNode))
                        openSet.add(neighborNode);
                    
                    allNodes.put(neighbor, neighborNode);
                }
            }
        }
        
        return Collections.emptyList();
    }
    
    private List<BlockPos> reconstructPath(Node node)
    {
        List<BlockPos> path = new ArrayList<>();
        
        while (node != null)
        {
            path.add(0, node.pos);
            node = node.parent;
        }
        
        return path;
    }
    
    private double heuristic(BlockPos a, BlockPos b)
    {
        return a.manhattanDist(b); // Manhattan distance for Minecraft grid
    }

    private List<BlockPos> getNeighbors(BlockPos pos) {
        List<BlockPos> neighbors = new ArrayList<>();
        for (EnumFacing dir : EnumFacing.values()) {
            BlockPos neighbor = pos.offset(dir);
            if (isWalkable(neighbor)) neighbors.add(neighbor);
        }
        return neighbors;
    }

    private boolean isWalkable(BlockPos pos) {
        IBlockState state = world.getBlockState(pos);
        return state.getMaterial().isSolid(); // Example check
    }

    private static class Node {
        BlockPos pos;
        Node parent;
        double gCost, hCost, fCost;

        Node(BlockPos pos, Node parent, double gCost, double hCost) {
            this.pos = pos;
            this.parent = parent;
            this.gCost = gCost;
            this.hCost = hCost;
            this.fCost = gCost + hCost;
        }
    }
}
